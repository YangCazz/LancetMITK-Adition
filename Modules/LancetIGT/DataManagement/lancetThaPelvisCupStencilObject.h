
#ifndef THAPELVISCUPSTENCILOBJECT_H
#define THAPELVISCUPSTENCILOBJECT_H

#include <mitkImageToImageFilter.h>

// The following header file is generated by CMake and thus it's located in
// the build directory. It provides an export macro for classes and functions
// that you want to be part of the public interface of your module.
#include <MitkLancetIGTExports.h>

//#include "lancetThaCupObject.h"
//#include "lancetThaPelvisObject.h"
#include "mitkDataNode.h"
//#include "mitkPointSet.h"
#include "mitkSurface.h"
#include "mitkImage.h"
#include "vtkPolyData.h"
#include "vtkDiscreteFlyingEdges3D.h"
#include "vtkWindowedSincPolyDataFilter.h"
#include "vtkTransformPolyDataFilter.h"

namespace lancet
{
	class MITKLANCETIGT_EXPORT ThaPelvisCupStencilObject : public itk::DataObject
	{
	public:
		mitkClassMacroItkParent(ThaPelvisCupStencilObject, itk::DataObject);
		itkFactorylessNewMacro(Self)
		itkCloneMacro(Self)

		//generate pelvis image to ream for the first time
		mitk::DataNode::Pointer GenerateReamingImage(mitk::Image::Pointer pelvisOverlay, mitk::Surface::Pointer PelvisClipped,
			 mitk::Surface::Pointer cup, std::string VolumeRenderingConfigFile);
		//update reaming image


	protected:

		ThaPelvisCupStencilObject();
		ThaPelvisCupStencilObject(const ThaPelvisCupStencilObject& other);
		~ThaPelvisCupStencilObject() override;

		mitk::DataNode::Pointer ApplyBoneStencil(mitk::Image::Pointer image, mitk::Surface::Pointer surface);

		mitk::DataNode::Pointer ApplyImplantStencil(mitk::Image::Pointer image, mitk::Surface::Pointer surface);

		void GenerateReamingColorLayer(mitk::Image::Pointer implantStencilImage,mitk::DataNode::Pointer whiteNode,
			mitk::DataNode::Pointer redNode, mitk::DataNode::Pointer greenNode);

		mitk::DataNode::Pointer CombineReamingImage(mitk::Image::Pointer implantStencilImage,
			mitk::Image::Pointer whiteImage, mitk::Image::Pointer redImage, mitk::Image::Pointer greenImage);

		void SetVolumeRenderingConfig(mitk::DataNode::Pointer imageToCut, std::string configFileName);

		void DiscreteFlyingEdges3D(mitk::Image::Pointer image, vtkPolyData* surface);

		vtkSmartPointer<vtkDiscreteFlyingEdges3D> m_flyingEdges3D;
		vtkSmartPointer<vtkWindowedSincPolyDataFilter> m_windowedSincPolyData;
		vtkSmartPointer<vtkTransformPolyDataFilter> m_TransformPolyDataFilter;
	};
}

#endif
