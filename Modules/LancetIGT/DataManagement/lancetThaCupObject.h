
#ifndef THACUPOBJECT_H
#define THACUPOBJECT_H

#include <mitkImageToImageFilter.h>

// The following header file is generated by CMake and thus it's located in
// the build directory. It provides an export macro for classes and functions
// that you want to be part of the public interface of your module.
#include <MitkLancetIGTExports.h>

#include "mitkDataNode.h"
#include "mitkPointSet.h"
#include "mitkSurface.h"

namespace lancet
{
	/**Documentation
	  * \brief 
	  *
	  * \ingroup IGT
	  */
	class MITKLANCETIGT_EXPORT ThaCupObject : public itk::DataObject
	{
	public:
		mitkClassMacroItkParent(ThaCupObject, itk::DataObject);
		itkFactorylessNewMacro(Self)
		itkCloneMacro(Self)

		itkSetMacro(OperationSide, int)
		itkGetMacro(OperationSide, int)

		itkGetMacro(vtkMatrix_groupGeometry, vtkSmartPointer<vtkMatrix4x4>)
		/*
		 * Update the geometry matrix of each data component (do not rewrite the data)
		 * with newMatrix and m_vtkMatrix_groupGeometry;
		 * replace m_vtkMatrix_groupGeometry with newMatrix
		 */
		void SetGroupGeometry(vtkSmartPointer<vtkMatrix4x4> newMatrix);

		itkGetMacro(Surface_cup, mitk::Surface::Pointer)
		// set cup surface and apply the group geometry
		void SetCupSurface(mitk::Surface::Pointer cupSurface);

		itkGetMacro(Surface_liner, mitk::Surface::Pointer)
		// set liner surface and apply the group geometry
		void SetLinerSurface(mitk::Surface::Pointer linerSurface);

		itkSetMacro(Surface_cupFrame, mitk::Surface::Pointer)
		itkGetMacro(Surface_cupFrame, mitk::Surface::Pointer)

		void SetNode_Surface_cup(mitk::DataNode::Pointer node);
		void SetNode_Surface_liner(mitk::DataNode::Pointer node);
		void SetNode_Surface_cupFrame(mitk::DataNode::Pointer node);
		itkGetMacro(Node_Surface_cup, mitk::DataNode::Pointer);
		itkGetMacro(Node_Surface_liner, mitk::DataNode::Pointer);
		itkGetMacro(Node_Surface_cupFrame, mitk::DataNode::Pointer);

		/*
		 * Move all the data components except for the cupFrame
		 * which is created at the world frame position,
		 * (rewrite the data, keep the geometry matrices as identity)
		 * so that the cup frame overlays with the world frame;
		 * No real action performed since the imported cup stl is already aligned;
		 * Keep this function to keep consistency with the pelvis and femur object
		 */
		bool AlignCupObjectWithWorldFrame();

		// Check if all necessary data are ready
		bool CheckDataAvailability();

	protected:
		ThaCupObject();
		ThaCupObject(const ThaCupObject& other);
		~ThaCupObject() override;

		// Create an internal frame
		void CreateInternalFrame();

		// operation side: right(0), left(1)
		int m_OperationSide{0};

		// the geometry matrix of the cup group object
		vtkSmartPointer<vtkMatrix4x4> m_vtkMatrix_groupGeometry;

		// acetabular cup surface
		mitk::Surface::Pointer m_Surface_cup;

		// liner surface
		mitk::Surface::Pointer m_Surface_liner;

		// cup frame surface
		mitk::Surface::Pointer m_Surface_cupFrame;

		mitk::DataNode::Pointer m_Node_Surface_cup;
		mitk::DataNode::Pointer m_Node_Surface_liner;
		mitk::DataNode::Pointer m_Node_Surface_cupFrame;


	};
}

#endif
