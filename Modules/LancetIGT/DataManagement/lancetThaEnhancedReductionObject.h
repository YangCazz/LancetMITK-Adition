#ifndef THAENHANCEDREDUCTIONOBJECT_H
#define THAENHANCEDREDUCTIONOBJECT_H

#include <mitkImageToImageFilter.h>

// The following header file is generated by CMake and thus it's located in
// the build directory. It provides an export macro for classes and functions
// that you want to be part of the public interface of your module.
#include <MitkLancetIGTExports.h>

#include "lancetThaFemurObject.h"
#include "lancetThaFemurStemCouple.h"
#include "lancetThaPelvisCupCouple.h"
#include "mitkDataNode.h"
#include "mitkPointSet.h"
#include "mitkSurface.h"
#include "lancetThaReductionObject.h"
#include "lancetThaPelvisCupStencilObject.h"

namespace lancet
{
	enum class PlanMode
	{
		NativeBoneReduction = 0,
		CupPlan = 1,
		StemPlan = 2,
		ImplantReduction = 3
	};

	enum class ViewMode
	{
		threeD = 0,
		CT = 1,
		Slicer = 2,
		Xray = 3,
		Reaming = 4
	};

	class MITKLANCETIGT_EXPORT ThaEnhancedReductionObject : public itk::DataObject
	{
	public:
		mitkClassMacroItkParent(ThaEnhancedReductionObject, itk::DataObject);
		itkFactorylessNewMacro(Self)
		itkCloneMacro(Self)

		itkSetMacro(PelvisCupCouple, lancet::ThaPelvisCupCouple::Pointer)
		itkGetMacro(PelvisCupCouple, lancet::ThaPelvisCupCouple::Pointer)

		itkSetMacro(FemurStemCouple, lancet::ThaFemurStemCouple::Pointer)
		itkGetMacro(FemurStemCouple, lancet::ThaFemurStemCouple::Pointer)

		itkSetMacro(FemurObject, lancet::ThaFemurObject::Pointer)
		itkGetMacro(FemurObject, lancet::ThaFemurObject::Pointer)

		itkGetMacro(HipLength_supine_R, double)
		itkGetMacro(HipLength_supine_L, double)
		itkGetMacro(CombinedOffset_supine_R, double)
		itkGetMacro(CombinedOffset_supine_L, double)

		// get matrices for No pelvicTilt and femurCanal alignment
		void GetNoTiltCanalMatrices(vtkSmartPointer<vtkMatrix4x4> pelvisMatrix,
		    vtkSmartPointer<vtkMatrix4x4> rightFemurMatrix,
		    vtkSmartPointer<vtkMatrix4x4> leftFemurMatrix);

		// get matrices for No pelvicTilt and femur mechanic axis alignment
		void GetNoTiltMechanicMatrices(vtkSmartPointer<vtkMatrix4x4> pelvisMatrix,
			vtkSmartPointer<vtkMatrix4x4> rightFemurMatrix,
			vtkSmartPointer<vtkMatrix4x4> leftFemurMatrix);

		// get matrices for supine pelvicTilt and femurCanal alignment
		void GetSupineTiltCanalMatrices(vtkSmartPointer<vtkMatrix4x4> pelvisMatrix,
			vtkSmartPointer<vtkMatrix4x4> rightFemurMatrix,
			vtkSmartPointer<vtkMatrix4x4> leftFemurMatrix);

		// get matrices for supine pelvicTilt and femur mechanic axis alignment
		void GetSupineTiltMechanicMatrices(vtkSmartPointer<vtkMatrix4x4> pelvisMatrix,
			vtkSmartPointer<vtkMatrix4x4> rightFemurMatrix,
			vtkSmartPointer<vtkMatrix4x4> leftFemurMatrix);

		// Update all component matrices
		void CalReductionMatrices();

		// Turn on/off the dataNodes according to the designated mode
		void SetPlanDisplayMode(PlanMode planMode, ViewMode viewMode);

		void GenerateImplantStencilPelvis(mitk::DataNode::Pointer PelvisImageNode, mitk::DataNode::Pointer PelvisSurfaceNode,
			mitk::DataNode::Pointer CupSurfaceNode,std::string VolumeRenderingConfigFile);

		mitk::DataNode::Pointer GetNode_Image_reaming();
	protected:
		ThaEnhancedReductionObject();
		ThaEnhancedReductionObject(const ThaEnhancedReductionObject& other);
		~ThaEnhancedReductionObject() override;

		// Calculate hip lengths
		void CalSupineHipLengths();

		// Calculate point-line distance
		double GetPointLineDistance(mitk::Point3D point, mitk::Point3D linePoint_0, mitk::Point3D linePoint_1);

		// Calculate combined offsets
		void CalSupineCombinedOffsets();

		// Check femur and pelvis availability
		bool CheckBoneImplantAvailability();

		// Update matrices for no-pelvicTilt femurCanal alignment
		void CalNoTiltCanalMatrices();

		// Update matrices for no pelvicTilt femurMechanic alignment
		void CalNoTiltMechanicMatrices();

		// Update matrices for supine-pelvicTilt femurCanal alignment
		void CalSupineCanalMatrices();

		// Update matrices for supine-pelvicTilt femurMechanic alignment
		void CalSupineMechanicMatrices();

		// Set Nodes visibility according to native bone reduction mode
		void SetNativeBoneReductionInView(ViewMode viewMode);
		// Set Nodes visibility according to cup plan mode
		void SetCupPlanModeInView(ViewMode viewMode);
		// Set Nodes visibility according to stem plan mode
		void SetStemPlanInView(ViewMode viewMode);
		// Set Nodes visibility according to implant reduction mode
		void SetImplantReductionInView(ViewMode viewMode);
		// Assemble PelvisCupCouple and FemurStemCouple according to bone alignment
		void SetBoneReduction();
		// Assemble PelvisCupCouple and FemurStemCouple according to Implant alignment
		void SetImplantReduction();

		//set mitk Image background transparent
		void SetImageBackGroudTransparentOn(mitk::DataNode::Pointer ImageNode, bool isOn);
		//set mitk Image volume rendering
		void SetImageVolumeRenderingOn(mitk::DataNode::Pointer ImageNode, bool isOn);

		//set femur image transparency state
		void SetFemurImageTransparency(bool isOn);
		//set pelvis and femur image volume rendering state
		void SetPelvisFemurImageVolumeRendering(bool isOn);
		//generate pelvis region to ream
		

		// Hip lengths with supine pelvic tilt 
		double m_HipLength_supine_R{ 0 };
		double m_HipLength_supine_L{ 0 };

		// Combined offsets with supine pelvic tilt
		double m_CombinedOffset_supine_R{ 0 };
		double m_CombinedOffset_supine_L{ 0 };

		// PelvisCupCouple
		lancet::ThaPelvisCupCouple::Pointer m_PelvisCupCouple;

		// FemurStemCouple: the operation side femur 
		lancet::ThaFemurStemCouple::Pointer m_FemurStemCouple;

		// FemurObject: the opposite side femur
		lancet::ThaFemurObject::Pointer m_FemurObject;

		// pelvisCup couple matrix without pelvicTilt, i.e., an identity matrix
		vtkSmartPointer<vtkMatrix4x4> m_NoPelvicTilt_pelvisMatrix;

		// right femur matrix with femurCanal alignment without pelvicTilt
		vtkSmartPointer<vtkMatrix4x4> m_NoPelvicTilt_canal_matrix_R;

		// left femur matrix with femurCanal alignment without pelvicTilt
		vtkSmartPointer<vtkMatrix4x4> m_NoPelvicTilt_canal_matrix_L;

		// right femur matrix with femur mechanic axis alignment without pelvicTilt
		vtkSmartPointer<vtkMatrix4x4> m_NoPelvicTilt_mechanic_matrix_R;

		// left femur matrix with femur mechanic axis alignment without pelvicTilt
		vtkSmartPointer<vtkMatrix4x4> m_NoPelvicTilt_mechanic_matrix_L;

		// pelvisCup couple matrix with supine pelvicTilt, i.e., an identity matrix
		vtkSmartPointer<vtkMatrix4x4> m_SupinePelvicTilt_pelvisMatrix;

		// right femur matrix with femurCanal alignment with supine pelvicTilt
		vtkSmartPointer<vtkMatrix4x4> m_SupinePelvicTilt_canal_matrix_R;

		// left femur matrix with femurCanal alignment with supine pelvicTilt
		vtkSmartPointer<vtkMatrix4x4> m_SupinePelvicTilt_canal_matrix_L;

		// right femur matrix with femur mechanic axis alignment with supine pelvicTilt
		vtkSmartPointer<vtkMatrix4x4> m_SupinePelvicTilt_mechanic_matrix_R;

		// left femur matrix with femur mechanic axis alignment with supine pelvicTilt
		vtkSmartPointer<vtkMatrix4x4> m_SupinePelvicTilt_mechanic_matrix_L;

		ThaReductionObject::Pointer m_ReductionObject;

		ThaPelvisCupStencilObject::Pointer m_PelvisCupStencilObject;

		mitk::DataNode::Pointer m_ReamingImage;
	};
}

#endif
